#import "rawos.li"

COMMAND_MAX_LENGTH :: 1024;
SHELL_PREFIX :: "$ ";
BREAK_LINE :: "\n";

main : () -> s32 {
	clear_screen();
	stdout := open("/dev/screen\0".data);
	stdin := open("/dev/keyboard\0".data);

	command : [COMMAND_MAX_LENGTH]u8;
	command_size := 0;

	while true {
		write(stdout, SHELL_PREFIX.data, SHELL_PREFIX.length);

		key : u8;
		read_bytes := read(stdin, &key, 1);
		while read_bytes > 0 && key != '\n' {
			if (command_size < COMMAND_MAX_LENGTH) {
				write(stdout, &key, 1);
				command[command_size] = key;
				command_size += 1;
			}
			read_bytes = read(stdin, &key, 1);
		}

		command[command_size] = '\0';

		if (command_size != 0) {
			pid := fork();
			if (pid == 0) {
				// Child!
				if (execve(command -> ^u8) < 0) {
					execve_error_msg := "Error running process!\n";
					write(stdout, execve_error_msg.data, execve_error_msg.length);
					exit(1);
				}
			} else {
				// Parent!
				// @TODO: implement wait()
			}
		}

		write(stdout, BREAK_LINE.data, BREAK_LINE.length);
		command_size = 0;
	}

	close(stdin);
	close(stdout);
	return 0;
}
